// Sumar JWT para manejo de tokens
{
users: {
    _id: string,
    username: string,    
    email: string,
    password: string, //Hashed
    createdAt: date,
    updatedAt: date,
    deletedAt: date
},
questionsCategories: {
    _id: string,
    name: string,
    description: string,
    createdAt: date,
    updatedAt: date,
    deletedAt: date
},
questions: {
    _id: string,
    description: string,    
    questionCategoryId: string,
    createdAt: date,
    updatedAt: date,
    deletedAt: date,
    level: number
},

//(opciones del juego)
games: {
    _id: string,
    userId: User,
    score: number,
    level: number,
    createdAt: date,
    updatedAt: date
},    
answers: {
    _id: string,
    description: string,
    isRight: boolean,
    questionId: string,
    createdAt: date,
    updatedAt: date,
    deletedAt: date
}
ranking: {
    _id: string,
    userId: string,
    score: number,
    createdAt: date,
    updatedAt: date,
    deletedAt: date
},
}

// endpoints 
- users:
-------------------- OK ---------------------
- POST /users
StatusCode: 201
Body:
{
    username: string,    
    email: string,
    password: string,
}

-------------------- OK ---------------------
// LOGIN
- POST /auth/signin
StatusCode: 200
Body: {
    email: string,
    password: string,
}

-------------------- OK ---------------------
//TOKEN
- PATCH /users/{:id}
StatusCode: 200
body: 
{
    username: string, 
    oldPassword: string,
    newPassword: string,
}

-------------------- OK ---------------------
- GET /users/{:id}
StatusCode: 200


-------------------- OK ---------------------
- POST /token/refresh
StatusCode: 200
body: {
    refreshToken: string
}
 
-------------------- OK ---------------------
- DELETE /users/{:id}
StatusCode: 204
body: {} //vacío porque ya estás logueado

- POST /questionsCategories
StatusCode: 201
Body: {
    name: string,
    description: string,
}

- GET /questionsCategories
StatusCode: 200

- PATCH /questionsCategories/{:id}
StatusCode: 200
body: 
{
    name: string,
    description: string,
}

- DELETE /questionsCategories/{:id}
StatusCode: 204
body: {} //vacío porque ya estás logueado

- POST /questions
StatusCode: 201
Body: {
    description: string,    
    questionCategoryName: string,
    level: number // default 1
}

- GET /questions //paginado y filtros
StatusCode: 200

- GET /questionsRandom?quantity=10&questionsCategories=[]
StatusCode: 200

- PATCH /questions/{:id}
StatusCode: 200
body: 
{
    description: string,    
    questionCategoryName: string,
    level: number
}

- DELETE /questions/{:id}
StatusCode: 204
body: {} //vacío porque ya estás logueado

-------------------- OK ---------------------
- POST /games
StatusCode: 201
Body: {
    user: User    
}

-------------------- OK ---------------------
- PATCH /games/{:id}
StatusCode: 200
body: 
{
    score: number,
    level: number
}

-------------------- OK ---------------------
- GET /games/{:id}
StatusCode: 200

-------------------- OK ---------------------
- POST /answers
StatusCode: 201
Body: {
    description: string,
    questionId: string,
    isRight: boolean
}

-------------------- OK ---------------------
- PATCH /answers/{:id}
StatusCode: 200
Body: {
    description: string,
    questionId: string,
    isRight: boolean
}

-------------------- OK ---------------------
- DELETE /answers/{:id}
StatusCode: 204
body: {} //vacío porque ya estás logueado

-------------------- OK ---------------------
- GET /answers //paginado y filtros
StatusCode: 200

-------------------- OK ---------------------
- POST /rankings
StatusCode: 201
Body: {
    userId: string,
    score: number,
}

-------------------- OK ---------------------
- GET /ranking //paginado y filtros
StatusCode: 200

// FALTANTES
- chequear Readme.md que esté ok(maxi)
- tests unitarios(dividido entre los 2)

------------------------------------------------------------------------------------------------------------------------------

Requerimientos 

Detalle de tecnologías utilizadas.
Librerías frameworks
Consideraciones funcionales especificas del juego elegido.

El proyecto será la implementación técnica de un proyecto web, con capa API y capa de frontend.
El mismo contará de dos entregables cuyas fechas están publicadas en el calendario de la materia.
En la primer entrega se evaluará la capa API del sistema (endpoints, persistencia, etc).

Requisitos mínimos:

Al menos tres niveles
Guardar la puntuación del usuario
Generar un ranking
