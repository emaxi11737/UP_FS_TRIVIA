// Sumar JWT para manejo de tokens
{
users: {
    _id: string,
    username: string,    
    email: string,
    password: string, //Hashed
    createdAt: date,
    updatedAt: date,
    deletedAt: date
},
questionsCategories: {
    _id: string,
    name: string,
    description: string,
    createdAt: date,
    updatedAt: date,
    deletedAt: date
},
questions: {
    _id: string,
    description: string,    
    questionCategoryId: string,
    createdAt: date,
    updatedAt: date,
    deletedAt: date
},

//(opciones del juego)
games: {
    _id: string,
    userId: User,
    score: number,
    level: number,
    createdAt: date,
    updatedAt: date
},    
answers: {
    _id: string,
    description: string,
    isRight: boolean,
    questionId: string,
    createdAt: date,
    updatedAt: date,
    deletedAt: date
}
}

// endpoints 
- users:
-------------------- OK ---------------------
- POST /users
StatusCode: 201
Body:
{
    username: string,    
    email: string,
    password: string,
}

-------------------- OK ---------------------
// LOGIN
- POST /auth/signin
StatusCode: 200
Body: {
    email: string,
    password: string,
}

-------------------- OK ---------------------
//TOKEN
- PATCH /users/{:id}
StatusCode: 200
body: 
{
    username: string, 
    oldPassword: string,
    newPassword: string,
}

-------------------- OK ---------------------
- GET /users/{:id}
StatusCode: 200


-------------------- OK ---------------------
- POST /token/refresh
StatusCode: 200
body: {
    refreshToken: string
}
 
-------------------- OK ---------------------
- DELETE /users/{:id}
StatusCode: 204
body: {} //vacío porque ya estás logueado

- POST /questionsCategories
StatusCode: 201
Body: {
    name: string,
    description: string,
}

- GET /questionsCategories
StatusCode: 200

- PATCH /questionsCategories/{:id}
StatusCode: 200
body: 
{
    name: string,
    description: string,
}

- DELETE /questionsCategories/{:id}
StatusCode: 204
body: {} //vacío porque ya estás logueado

- POST /questions
StatusCode: 201
Body: {
    description: string,    
    questionCategoryName: string,
}

- GET /questions //paginado
StatusCode: 200

- GET /questionsRandom?quantity=10&questionsCategories=[]
StatusCode: 200

- PATCH /questions/{:id}
StatusCode: 200
body: 
{
    description: string,    
    questionCategoryName: string,
}

- DELETE /questions/{:id}
StatusCode: 204
body: {} //vacío porque ya estás logueado

-------------------- OK ---------------------
- POST /games
StatusCode: 201
Body: {
    user: User    
}

-------------------- OK ---------------------
- PATCH /games/{:id}
StatusCode: 200
body: 
{
    score: number,
    level: number
}

-------------------- OK ---------------------
- GET /games/{:id}
StatusCode: 200

-------------------- OK ---------------------
- POST /answers
StatusCode: 201
Body: {
    description: string,
    questionId: string,
    isRight: boolean
}

-------------------- OK ---------------------
- PATCH /answers/{:id}
StatusCode: 200
Body: {
    description: string,
    questionId: string,
    isRight: boolean
}

-------------------- OK ---------------------
- DELETE /answers/{:id}
StatusCode: 204
body: {} //vacío porque ya estás logueado

-------------------- OK ---------------------
- GET /answers //paginado
StatusCode: 200


// FALTANTES
- chequear PR faltante
- filtros en questions, questionsCategories y answers
- endpoint questionsRandom con filtros
- agregar roles [admin, user] a los usuarios
- precargar por default el usuario admin por única vez
- tests unitarios
- chequear Readme.md que esté ok
- chequear Swagger que esté ok
